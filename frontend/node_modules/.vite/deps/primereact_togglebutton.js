"use client";
import {
  Tooltip
} from "./chunk-TN2T4VKS.js";
import "./chunk-WBAKVWMN.js";
import {
  Ripple
} from "./chunk-NZDTZH65.js";
import "./chunk-VZ2FHK5Q.js";
import {
  ComponentBase,
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  classNames,
  useHandleStyle,
  useMergeProps,
  useMountEffect
} from "./chunk-FROSF2FZ.js";
import {
  require_react
} from "./chunk-256VXULK.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/primereact/togglebutton/togglebutton.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var classes = {
  root: function root(_ref) {
    var props = _ref.props;
    return classNames("p-togglebutton p-component", {
      "p-disabled": props.disabled,
      "p-highlight": props.checked,
      "p-invalid": props.invalid
    });
  },
  input: "p-togglebutton-input",
  box: function box(_ref2) {
    var hasIcon = _ref2.hasIcon, hasLabel = _ref2.hasLabel;
    return classNames("p-button p-component", {
      "p-button-icon-only": hasIcon && !hasLabel
    });
  },
  icon: function icon(_ref3) {
    var props = _ref3.props, label = _ref3.label;
    return classNames("p-button-icon", {
      "p-button-icon-left": props.iconPos === "left" && label,
      "p-button-icon-right": props.iconPos === "right" && label
    });
  },
  label: "p-button-label"
};
var ToggleButtonBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "ToggleButton",
    id: null,
    onIcon: null,
    offIcon: null,
    onLabel: "Yes",
    offLabel: "No",
    iconPos: "left",
    invalid: false,
    style: null,
    className: null,
    checked: false,
    tabIndex: 0,
    tooltip: null,
    tooltipOptions: null,
    onChange: null,
    onFocus: null,
    onBlur: null,
    children: void 0
  },
  css: {
    classes
  }
});
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var ToggleButton = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = ToggleButtonBase.getProps(inProps, context);
  var elementRef = React.useRef(null);
  var _ToggleButtonBase$set = ToggleButtonBase.setMetaData({
    props
  }), ptm = _ToggleButtonBase$set.ptm, cx = _ToggleButtonBase$set.cx, isUnstyled = _ToggleButtonBase$set.isUnstyled;
  useHandleStyle(ToggleButtonBase.css.styles, isUnstyled, {
    name: "togglebutton"
  });
  var hasLabel = props.onLabel && props.onLabel.length > 0 && props.offLabel && props.offLabel.length > 0;
  var hasIcon = props.onIcon && props.offIcon;
  var label = hasLabel ? props.checked ? props.onLabel : props.offLabel : "&nbsp;";
  var icon2 = props.checked ? props.onIcon : props.offIcon;
  var toggle = function toggle2(e) {
    if (!props.disabled && props.onChange && !props.readonly) {
      props.onChange({
        originalEvent: e,
        value: !props.checked,
        stopPropagation: function stopPropagation() {
          e.stopPropagation();
        },
        preventDefault: function preventDefault() {
          e.preventDefault();
        },
        target: {
          name: props.name,
          id: props.id,
          value: !props.checked
        }
      });
    }
  };
  var onKeyDown = function onKeyDown2(event) {
    if (event.keyCode === 32) {
      toggle(event);
      event.preventDefault();
    }
  };
  var onFocus = function onFocus2(event) {
    var _props$onFocus;
    props === null || props === void 0 || (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, event);
  };
  var onBlur = function onBlur2(event) {
    var _props$onBlur;
    props === null || props === void 0 || (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, event);
  };
  var createIcon = function createIcon2() {
    if (hasIcon) {
      var iconProps = mergeProps({
        className: cx("icon", {
          label
        })
      }, ptm("icon"));
      return IconUtils.getJSXIcon(icon2, _objectSpread({}, iconProps), {
        props
      });
    }
    return null;
  };
  React.useImperativeHandle(ref, function() {
    return {
      props,
      focus: function focus() {
        return DomHandler.focusFirstElement(elementRef.current);
      },
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useMountEffect(function() {
    if (props.autoFocus) {
      DomHandler.focusFirstElement(elementRef.current);
    }
  });
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);
  var tabIndex = props.disabled ? -1 : props.tabIndex;
  var iconElement = createIcon();
  var labelProps = mergeProps({
    className: cx("label")
  }, ptm("label"));
  var rootProps = mergeProps({
    ref: elementRef,
    id: props.id,
    className: classNames(props.className, cx("root", {
      hasIcon,
      hasLabel
    })),
    "data-p-highlight": props.checked,
    "data-p-disabled": props.disabled
  }, ToggleButtonBase.getOtherProps(props), ptm("root"));
  var inputProps = mergeProps({
    id: props.inputId,
    className: cx("input"),
    style: props.style,
    onChange: toggle,
    onFocus,
    onBlur,
    onKeyDown,
    tabIndex,
    role: "switch",
    type: "checkbox",
    "aria-pressed": props.checked,
    "aria-invalid": props.invalid,
    disabled: props.disabled,
    readOnly: props.readonly,
    value: props.checked,
    checked: props.checked
  }, ptm("input"));
  var boxProps = mergeProps({
    className: cx("box", {
      hasIcon,
      hasLabel
    })
  }, ptm("box"));
  return React.createElement(React.Fragment, null, React.createElement("div", rootProps, React.createElement("input", inputProps), React.createElement("div", boxProps, iconElement, React.createElement("span", labelProps, label), React.createElement(Ripple, null))), hasTooltip && React.createElement(Tooltip, _extends({
    target: elementRef,
    content: props.tooltip,
    pt: ptm("tooltip")
  }, props.tooltipOptions)));
}));
ToggleButton.displayName = "ToggleButton";
export {
  ToggleButton
};
//# sourceMappingURL=primereact_togglebutton.js.map
